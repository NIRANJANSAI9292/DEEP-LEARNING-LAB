import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

inputs = np.array([[0,0], [0,1], [1,0], [1,1]])
labels = np.array([[0], [1], [1], [0]])

np.random.seed(42)
weights_input_hidden = np.random.randn(2, 2)
bias_hidden = np.zeros((1, 2))

weights_hidden_output = np.random.randn(2, 1)
bias_output = np.zeros((1, 1))

learning_rate = 0.1

for iteration in range(10000):
    hidden_input = np.dot(inputs, weights_input_hidden) + bias_hidden
    hidden_output = sigmoid(hidden_input)

    final_input = np.dot(hidden_output, weights_hidden_output) + bias_output
    final_output = sigmoid(final_input)

    loss = np.mean((final_output - labels) ** 2)

    error_output = final_output - labels
    delta_output = error_output * sigmoid_derivative(final_output)

    error_hidden = np.dot(delta_output, weights_hidden_output.T)
    delta_hidden = error_hidden * sigmoid_derivative(hidden_output)

    gradient_weights_hidden_output = np.dot(hidden_output.T, delta_output)
    gradient_bias_output = np.sum(delta_output, axis=0, keepdims=True)

    gradient_weights_input_hidden = np.dot(inputs.T, delta_hidden)
    gradient_bias_hidden = np.sum(delta_hidden, axis=0, keepdims=True)

    weights_hidden_output -= learning_rate * gradient_weights_hidden_output
    bias_output -= learning_rate * gradient_bias_output

    weights_input_hidden -= learning_rate * gradient_weights_input_hidden
    bias_hidden -= learning_rate * gradient_bias_hidden

    if iteration % 1000 == 0:
        print(f"Iteration {iteration}, Loss: {loss}")

print("Training complete!")
print("Final output:")
print(final_output)
